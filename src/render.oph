; Subroutines for rendering blank tiles and rows.
; This helps to compress 1K nametables down to
; smaller procedurally-generated maps.

WriteBlankRows:
  TYA                 ; Transfer Y to Accumulator.
  PHA                 ; PusH Accumulator to stack.
  LDY #$00            ; Clear Y for row counter.
* LDA #$20            ; Load 32 into Accumulator
  STA BlankTiles      ; Tell the function to write 32 tiles.
  JSR WriteBlankTiles ; Write the blank tiles.
  INY                 ; Increment the row counter.
  CPY BlankRows       ; Compare Y to blank row total.
  BNE -               ; Repeat if not equal.
  LDA #$00            ; Clear the Accumulator.
  STA BlankRows       ; Zero out blank rows.
  PLA                 ; PuLl Accumulator from stack.
  TAY                 ; Transfer Accumulator to Y. (Restore Y)
  RTS

WriteBlankTiles:
  TXA                 ; Transfer X to Accumulator.
  PHA                 ; Push Accumulator to stack.
  LDX #$00            ; Clear X for row counter.
* LDA #$00            ; Load #$00 (blank tile index)
  STA VRAMIO          ; Write to VRAM I/O register.
  INX                 ; Increment X.
  CPX BlankTiles      ; Compare X to blank tile total.
  BNE -               ; Branch up if not equal.
  LDA #$00            ; Clear accumulator.
  STA BlankTiles      ; Reset blank tile counter.
  PLA                 ; Pull Accumulator from stack.
  TAX                 ; Transfer A to X. (Restore X)
  RTS  

InitSprites:
  ; Paddle 1 Top
  LDX #$00
* LDA Paddle1Top, X
  STA PaddleP1Top, X
  INX
  CPX #$04
  BNE -
  ; Paddle 1 Center
  LDX #$00
* LDA Paddle1Mid, X
  STA PaddleP1Mid, X
  INX
  CPX #$04
  BNE -
  ; Paddle 1 Bottom
  LDX #$00
* LDA Paddle1Bot, X
  STA PaddleP1Bot, X
  INX
  CPX #$04
  BNE -
  ; Paddle 2 Top
  LDX #$00
* LDA Paddle2Top, X
  STA PaddleP2Top, X
  INX
  CPX #$04
  BNE -
  ; Paddle 2 Center
  LDX #$00
* LDA Paddle2Mid, X
  STA PaddleP2Mid, X
  INX
  CPX #$04
  BNE -
  ; Paddle 2 Bottom
  LDX #$00
* LDA Paddle2Bot, X
  STA PaddleP2Bot, X
  INX
  CPX #$04
  BNE -
  ; Ball
  LDX #$00
* LDA BallSprite, X
  STA Ball, X
  INX
  CPX #$04
  BNE -
  RTS

RenderTitleScreen:
  LDY #$00
  LDX #$04
  LDA #<TitleScreen
  STA MapAddr
  LDA #>TitleScreen
  STA MapAddr+1
  LDA PPUStatus
  LDA #$20
  STA VRAMAddr
  LDA #$00
  STA VRAMAddr
* LDA (MapAddr), Y
  STA VRAMIO
  INY
  CPY #$FF
  BNE -
  INC MapAddr+1
  DEX
  CPX #$00
  BNE -
  RTS

RenderPlayField:
  `setPPU NameTable0
  LDA #$02
  STA BlankRows
  JSR WriteBlankRows
  LDX #$00
* LDA scoreRow, X
  STA VRAMIO
  INX
  CPX #$20
  BNE -
  LDA #$01
  STA BlankRows
  JSR WriteBlankRows
  LDA #$01
  STA BlankTiles
  JSR WriteBlankTiles
  LDA #$01  ; Top-left corner
  STA VRAMIO
  LDA #$02  ; Upper border
  LDX #$00
* STA VRAMIO
  INX
  CPX #$1C  ; Do this 28 times.
  BNE -
  LDA #$03  ; Top-right corner
  STA VRAMIO
  LDA #$02
  STA BlankTiles
  JSR WriteBlankTiles
  LDX #$00
* LDA #$07  ; Left border
  STA VRAMIO
  LDA #28
  STA BlankTiles
  JSR WriteBlankTiles
  LDA #$08  ; Right border
  STA VRAMIO
  LDA #$02
  STA BlankTiles
  JSR WriteBlankTiles
  INX
  CPX #$16
  BNE -
  LDA #$04  ; Bottom-right corner
  STA VRAMIO
  LDX #$00
  LDA #$05  ; Bottom border
* STA VRAMIO
  INX
  CPX #$1C  ; Again, repeat 28 times.
  BNE -
  LDA #$06
  STA VRAMIO
  ; Next, write the attribute table.
  `setPPU AttributeTable0
  LDX #$00
  LDA #$00
* STA VRAMIO
  INX
  CPX #$40  ; Attribute table is 64 bytes.
  BNE -
  RTS

RenderTitleCard:
  `setPPU NameTable0      ; Set PPU address to Nametable 0.
  LDA #$04
  STA BlankRows
  JSR WriteBlankRows      ; Render 4 blank rows.
  LDY #$00                ; Set our row counter to zero.
  LDA #$14
  STA TempCounter         ; Set row length (20 tiles).
  LDX #$00                ; Set our table tracker to zero.
* LDA #$06
  STA BlankTiles
  JSR WriteBlankTiles     ; Draw 6 blank tiles to center image.
* LDA HonkeyLogoData, X   ; Pull tile offset from image table.
  STA VRAMIO              ; Write to current PPU/Nametable offset.
  INX                     ; Increment the tracker.
  CPX TempCounter         ; Compare to current row end offset.
  BNE -                   ; Pull/draw another tile if not there.
  LDA TempCounter         ; Pull row end offset from RAM.
  CLC                     ; Clear the carry bit (Prepare to add).
  ADC #$14                ; Add another row length.
  STA TempCounter         ; Store new row end offset in RAM.
  LDA #$06
  STA BlankTiles
  JSR WriteBlankTiles     ; Put blank tiles on right side.
  INY                     ; Increment row counter.
  CPY #$05                ; Are all 5 rows rendered yet?
  BNE --                  ; If not, start the next row.
  ; Rendered "HONKEY", now start on "KONG".
  ; The next blocks are basically the same as the first.
  ; The only real differences are the size of the images.
  LDX #$00                ; Reset table tracker.
  LDY #$00                ; Reset row tracker.
  LDA #$0E                ; These rows are shorter (14 tiles).
  STA TempCounter         ; Store row length in TempCounter
* LDA #$09
  STA BlankTiles
  JSR WriteBlankTiles     ; Shorter rows mean more filler.
* LDA KongLogoData, X     ; Pull a tile.
  STA VRAMIO              ; Place a tile. (Just like the penny tray!)
  INX                     ; Next tile, please!
  CPX TempCounter         ; Is this row finished?
  BNE -                   ; No? Place the next tile.
  LDA TempCounter         ; Yes? Bump up the counter.
  CLC                     ; Clear the carry again.
  ADC #$0E                ; Add another row's worth.
  STA TempCounter         ; Store the new value.
  LDA #$09
  STA BlankTiles
  JSR WriteBlankTiles     ; Fill the rest of the row.
  INY                     ; Increment the row counter.
  CPY #$05                ; Are all five rows filled?
  BNE --                  ; No? Do another one.
  ; Rendered "KONG", next render my super-awesome avatar sprite
  LDA #$02
  STA BlankRows
  JSR WriteBlankRows      ; Drop a couple more blank rows.
  LDX #$00                ; New table, clear the tracker.
  LDY #$00                ; Wipe out the row tracker too.
  LDA #$04                ; I'm only 4 tiles wide!
  STA TempCounter         ; (I wish I was really that thin.)
* LDA #$0E
  STA BlankTiles
  JSR WriteBlankTiles     ; (HOLY CRAP, FOURTEEN BLANKS!)
* LDA HonkeySprite, X     ; Pull my tiles. (Be gentle!)
  STA VRAMIO              ; Put me in place. (It's my first time!)
  INX                     ; NEXT!
  CPX TempCounter         ; Are we done yet?
  BNE -                   ; No? Shit! Do it again!
  LDA TempCounter         ; Pull the counter again.
  CLC                     ; Clear the carry bit. (Sound familiar?)
  ADC #$04                ; Add another row of tiles.
  STA TempCounter         ; Put it back! You don't know where it's been!
  LDA #$0E
  STA BlankTiles
  JSR WriteBlankTiles     ; 14 more blanks. That's a lot of empty space.
  INY                     ; Yep, we're done with this row now.
  CPY #$06                ; Are all six rows finished?
  BNE --                  ; Guess not. Back to the grind...
  ; I look fantastic. Let's do more shameless self-promotion.
  ; If you don't understand this by now, I can't help you.
  LDA #$02
  STA BlankRows
  JSR WriteBlankRows
  LDX #$00
  LDY #$00
  LDA #$14
  STA TempCounter
* LDA #$06
  STA BlankTiles
  JSR WriteBlankTiles
* LDA HonkeyKongURLData, X
  STA VRAMIO
  INX
  CPX TempCounter
  BNE -
  LDA #$06
  STA BlankTiles
  JSR WriteBlankTiles
  LDA TempCounter
  CLC
  ADC #$14
  STA TempCounter
  INY
  CPY #$02
  BNE --
  LDA #$02
  STA BlankRows
  JSR WriteBlankRows
  RTS

WriteHKAttributes:
  `setPPU AttributeTable0
  LDA #$00
  LDX #$00
* STA VRAMIO
  INX 
  CPX #$20
  BNE -
  LDA #$55
  LDX #$00
* STA VRAMIO
  INX
  CPX #$10
  BNE -
  LDA #$00
  LDX #$00
* STA VRAMIO
  INX
  CPX #$10
  BNE -
  RTS

ClearAttribute:
  `setPPU AttributeTable0
  LDA #$00
* STA VRAMIO
  INX
  CPX #$40
  BNE -
  RTS

; Graphics Data
HonkeyLogoData:
 .byte $6E, $01, $02, $03, $04, $05, $06, $07, $08, $09, $0A, $0B, $0C, $0D, $0E, $0F, $50, $51, $52, $53
 .byte $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $1A, $1B, $1C, $1D, $1E, $1F, $60, $61, $62, $63
 .byte $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $70, $71, $72, $73
 .byte $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $3A, $3B, $3C, $3D, $3E, $3F, $80, $81, $82, $83
 .byte $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $4A, $4B, $4C, $4D, $4E, $4F, $90, $91, $92, $93

KongLogoData:
 .byte $54, $55, $56, $03, $04, $05, $06, $57, $58, $59, $5A, $5B, $5C, $5D
 .byte $64, $65, $66, $13, $14, $15, $16, $67, $68, $69, $6A, $6B, $6C, $6D
 .byte $74, $75, $76, $23, $24, $25, $26, $77, $78, $79, $7A, $7B, $7C, $7D
 .byte $84, $85, $86, $33, $34, $35, $36, $87, $88, $89, $8A, $8B, $8C, $8D
 .byte $94, $95, $96, $43, $44, $45, $46, $97, $98, $99, $9A, $9B, $9C, $9D

HonkeySprite:
 .byte $A9, $AA, $AB, $AC 
 .byte $B9, $BA, $BB, $BC 
 .byte $C9, $CA, $CB, $CC 
 .byte $D9, $DA, $DB, $DC 
 .byte $E9, $EA, $EB, $EC 
 .byte $F9, $FA, $FB, $FC 

HonkeyKongURLData:
 ; http://www.honkeykong.org/
 .byte $A0, $A1, $A2, $A3, $A4, $A5, $A6, $A7, $C0, $C1, $C2, $C3, $C4, $C5, $C6, $C7, $E0, $E1, $E2, $E3
 .byte $B0, $B1, $B2, $B3, $B4, $B5, $B6, $B7, $D0, $D1, $D2, $D3, $D4, $D5, $D6, $D7, $F0, $F1, $F2, $F3

; These palettes are repeated because we don't use sprite palettes,
; and this ensures that the 32-byte palette memory is filled.
honkeyPal:
  .incbin "../res/pal/honkeykong.pal"
  .incbin "../res/pal/honkeykong.pal"

titlePal:
  .incbin "../res/pal/title.pal"
  .incbin "../res/pal/title.pal"

gamePal:
  .incbin "../res/pal/maingame.pal"
  .incbin "../res/pal/sprites.pal"

; Raw Nametable data for the title screen.
; Built using http://fsp.fm/wrk/playpower/
TitleScreen:
  .incbin "../res/nam/title.nam"